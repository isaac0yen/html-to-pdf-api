// Alternative approach using @sparticuz/chromium with specific Node.js runtime
const chromium = require("@sparticuz/chromium");
const puppeteer = require("puppeteer-core");

// Force specific Node.js runtime for better compatibility
if (process.env.VERCEL) {
  chromium.setHeadlessMode = true;
  chromium.setGraphicsMode = false;
}

module.exports = async (req, res) => {
  let browser = null;
  
  try {
    // Handle GET -> show test HTML page
    if (req.method === "GET") {
      return res.status(200).send(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>PDF Generator Test</title>
        </head>
        <body>
          <h1>Hello Sir Isaac0yen ðŸš€</h1>
          <p>This is a test page for your <b>HTML â†’ PDF API</b> running on Vercel.</p>
          <form method="POST" action="/" style="margin-top:20px;">
            <textarea name="html" rows="8" cols="60"><h2>PDF Test</h2><p>This is generated by Puppeteer on Vercel!</p></textarea><br/>
            <button type="submit">Generate PDF</button>
          </form>
        </body>
        </html>
      `);
    }

    // Handle POST -> generate PDF
    if (req.method === "POST") {
      let html;

      if (req.headers["content-type"]?.includes("application/json")) {
        html = req.body?.html;
      } else {
        html = req.body?.html || "";
      }

      if (!html) {
        return res.status(400).json({ error: "Missing HTML input" });
      }

      // Launch browser with minimal configuration
      browser = await puppeteer.launch({
        args: [
          ...chromium.args,
          "--no-sandbox",
          "--disable-setuid-sandbox",
          "--disable-dev-shm-usage",
          "--disable-gpu",
          "--disable-web-security",
          "--disable-features=VizDisplayCompositor",
        ],
        defaultViewport: { width: 1280, height: 720 },
        executablePath: await chromium.executablePath("/tmp"),
        headless: "new",
        ignoreHTTPSErrors: true,
      });

      const page = await browser.newPage();
      await page.setContent(html, { 
        waitUntil: "domcontentloaded",
        timeout: 15000 
      });

      const pdfBuffer = await page.pdf({ 
        format: "A4",
        printBackground: true,
        timeout: 15000
      });

      res.setHeader("Content-Type", "application/pdf");
      res.setHeader("Content-Disposition", "attachment; filename=output.pdf");
      return res.status(200).send(pdfBuffer);
    }

    // Invalid method
    res.setHeader("Allow", ["GET", "POST"]);
    return res.status(405).json({ error: `Method ${req.method} Not Allowed` });
  } catch (err) {
    console.error("PDF generation error:", err);
    return res.status(500).json({ 
      error: "Failed to generate PDF", 
      details: err.message,
      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  } finally {
    if (browser) {
      await browser.close();
    }
  }
};
